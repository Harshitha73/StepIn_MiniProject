        -:    0:Source:src/MergeSort.c
        -:    0:Programs:6
        -:    1:#include "Sorting.h"
        -:    2:
        2:    3:void merge(int array[], int left, int mid, int right)
        2:    4:{
        -:    5:    int i, j, k;
        2:    6:    int limit1 = mid - left + 1;
        2:    7:    int limit2 = right - mid;
        -:    8: 
        -:    9:    /* create temp arrays */
        2:   10:    int Left[limit1], Right[limit2];
        -:   11: 
        -:   12:    /* Copy data to temp arrays L[] and R[] */
        5:   13:    for (i = 0; i < limit1; i++)
        3:   14:        Left[i] = array[left + i];
        4:   15:    for (j = 0; j < limit2; j++)
        2:   16:        Right[j] = array[mid + 1 + j];
        -:   17: 
        -:   18:    /* Merge the temp arrays back into arr[l..r]*/
        2:   19:    i = 0; // Initial index of first subarray
        2:   20:    j = 0; // Initial index of second subarray
        2:   21:    k = left; // Initial index of merged subarray
        5:   22:    while (i < limit1 && j < limit2) {
        3:   23:        if (Left[i] <= Right[j]) {
        2:   24:            array[k] = Left[i];
        2:   25:            i++;
        -:   26:        }
        -:   27:        else {
        1:   28:            array[k] = Right[j];
        1:   29:            j++;
        -:   30:        }
        3:   31:        k++;
        -:   32:    }
        -:   33: 
        -:   34:    /* Copy the remaining elements of L[], if there
        -:   35:    are any */
        3:   36:    while (i < limit1) {
        1:   37:        array[k] = Left[i];
        1:   38:        i++;
        1:   39:        k++;
        -:   40:    }
        -:   41: 
        -:   42:    /* Copy the remaining elements of R[], if there
        -:   43:    are any */
        3:   44:    while (j < limit2) {
        1:   45:        array[k] = Right[j];
        1:   46:        j++;
        1:   47:        k++;
        -:   48:    }
        2:   49:}
        -:   50: 
        -:   51:/* l is for left index and r is right index of the
        -:   52:sub-array of arr to be sorted */
        5:   53:int* MergeSort(int array_ptr[], int left, int right)
        -:   54:{
        5:   55:    if (left < right) {
        -:   56:        // Same as (l+r)/2, but avoids overflow for
        -:   57:        // large l and h
        2:   58:        int mid = left + (right - left) / 2;
        -:   59: 
        -:   60:        // Sort first and second halves
        2:   61:        MergeSort(array_ptr, left, mid);
        2:   62:        MergeSort(array_ptr, mid + 1, right);
        -:   63: 
        2:   64:        merge(array_ptr, left, mid, right);
        -:   65:    }
        5:   66:    return array_ptr;
        -:   67:}
